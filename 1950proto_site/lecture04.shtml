
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Comp 1950 CSS Concepts</title>
    <meta name="author" content="Comp 1950 Group 1">
    <meta name="description"
	content="A prototype site for a rework of the existing BCIT Comp1950 student site. Initial CSS concepts.">
    
    <!--javascript include-->
    <script src="http://code.jquery.com/jquery-1.8.2.min.js" type="text/javascript"></script>   
    <script>
        /* These functions should be included in a file so it wouldn't need to be
         * copied to each lecture file. None of us have taken Jason's javascript 
         * course yet, so it might not happen. -- Team1
         */
        $(document).ready(function() {
            
            /* !! EDIT THIS FOR EACH LECTURE PAGE */
           $("#lecture04").addClass("current");
            
            /*close all the open submenus except the current one*/
           $("#accordion > li").each(function(i){
                if($(this).children().hasClass("submenu") && !($(this).hasClass("current"))){ /*only accordion if there is a submenu */             
                    $($(this).children(".submenu")).hide();
                }               
           });
           
           /*deal with menu when mouse is over menu but don't close the current page*/ 
            $("#accordion > li").hover(
                function(){
                if($(this).children().hasClass("submenu")&& !($(this).hasClass("current"))){ 
                    $(this).children(".submenu").slideDown(250);
                }
            },
            function(){
                if($(this).children().hasClass("submenu")&& !($(this).hasClass("current"))){ 
                    $(this).children(".submenu").slideUp(250);
                }
            });                         
        });    
    </script> 
    
    <!--stylesheet include-->
    
    <!-- Google Web Fonts - Open Sans Condensed -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300,700' rel='stylesheet' type='text/css'>
    
    <!-- Google Web Fonts - Open Sans -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300,400,700' rel='stylesheet' type='text/css'>
    
    <link rel="Stylesheet" type="text/css" href="css/normalize.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="css/main.css" media="screen"/> 
</head>
<body>
	<!-- using SSI for header-->
	<!--#include file="inc/header.inc"-->

	<!-- using SSI for top Navigation -->
	<!--#include file="inc/nav.inc"-->

	<!-- Agenda Info -->
	<!-- 
	 * Review HTML5 Assignment
	 * Markup Quiz
	 * CSS Concepts
	 * Exercises
	 * Specificity
	 * Measurements
	 * Homework
	 -->
	<section id="content">
	    <header>
            <h1>COMP 1950 > Lecture 4 CSS Concepts</h1>
        </header>

		<!-- disable the agenda part -->
        <!-- 
        <div class="content-block">
            <p>the agenda for lecture 4 is the following:</p>
            <ul>
                <li><a href="#review-html5-assignment">Review HTML5 Assignment</a></li>
                <li><a href="#markup-quiz">Markup Quiz</a></li>
                <li><a href="#css-concepts">CSS Concepts</a></li>
                <li><a href="#exercises">Exercises</a></li>
                <li><a href="#specificity">Specificity</a></li>
                <li><a href="#measurements">Measurements</a></li>
                <li><a href="#homework">Homework</a></li>
            </ul>
        </div>
         -->
        <!-- end of  disable the agenda part -->

		<article id="review-html5-assignment">
			<h2>HTML5 Assignment</h2>
			<div class="content-block">
				<p>
					Let's take a look at the <a href="http://cl.ly/1T3V1P020Y3A3A204120">week 3 assignment</a> you did and talk about using HTML5 for the markup
				</p>

				<p>
					One excellent tool we can take a look at while doing that is this <a href="http://html5doctor.com/downloads/h5d-sectioning-flowchart.pdf">HTML5 element flowchart</a> created by the authors of HTML5 Doctor.
				</p>
			</div>
		</article>

		<article id="markup-quiz">
		
		</article>

		<article id="css-concepts">
			<h2>css concepts</h2>

			<div class="content-block">
				<p>Over the last few weeks, I re-introduced basic CSS concepts like HTML, ID, and Class Elements, as well as where to place your content: Inline, Embedded and External</p>

				<p>Today, we'll take that further and talk about different ways to reference your CSS, various kinds of selectors, and working withthe most commonly used element on every web page: the link</p>
			</div>
					<h2>Referencing CSS</h2>
			<div class="content-block">
				<h3>Linking your CSS</h3>
				<p>When linking to external style sheets, there are a number of things to know about linking to those external files. A standard LINK element:</p>

				<code>&lt;link rel="stylesheet" type="text/css"
					href="http://www.mysite.com/css/styles.css" title="Main Style"
					media="screen" /&gt;</code>

				<p>This features a number of things to keep in mind:</p>
				<ul>
					<li>Each stylesheet should have a <code>title</code> tag inside of it</li>
					<li>The <code>title</code> tag allows the user to select different styles if required </li>
					<li>Multiple stylesheets can be loaded (main.css, fonts.css, layout.css, etc)</li>
					<li>Each stylesheet requires it's own <code>link</code> tag</li>
					<li>The "media" attribute allows you to specify what medium this should be viewed in</li>
				</ul>

				<h3>Media variations</h3>
				<ul>
					<li><code>media="type"</code> can be a powerful tool</li>
					<li>Examples of supported types: all, aural, braille, embossed, handheld, print, projection, screen, tty, tv</li>
					<li>Most are not commonly supported, but ones that you will see often: all, screen, print with handheld becoming more popular</li>
					<li>Almost all browsers use the 'print' sheet to render text and elements for when the user selects a page to print</li>
					<li>This can be extremely valuable for when you have a lot of page information that you might not want to have show up on a printout (ie: navigation)</li>
				</ul>


				<h3>Alternate sheets</h3>
				<p>You can also have alternate stylesheets supported</p>
				<ul>
					<li>This can be done by using <code>rel="alternate
							stylesheet"</code> within the <code>link</code> element
					</li>
					<li><strong>Tip:</strong> If you have multiple sheets that
						belong to one "look" make sure they all have the same <code>title</code>
						name</li>
					<li>You can create alternate style sheets for users, allowing
						them to select which ones they would like to see</li>
					<li>An example would be to create a 'Larger Text' style sheet
						with everything in a larger font, or an alternate sheet for
						Hallowe'en for your site</li>
					<li>Many browsers are now giving users the ability to select
						which sheet they would like to see. (Firefox: View &gt; Page
						Style)</li>
					<li>See <a href="http://geoinfo.nmt.edu/css/home.html">
							New Mexico Bureau of Geology and Mineral Resources </a> , or <a
						href="http://www.codestyle.org/index.shtml">CodeStyle</a> for
						examples
					</li>
					<li>Next week we'll build a stylesheet switcher as well as a
						print-only stylesheet</li>

				</ul>


				<h3>The @import Method</h3>
				<ul>
					<li>There is another method: @import</li>
					<li>This works well when dealing with older browsers, as they
						don't read the command</li>
					<li>Simply reference a stylesheet that imports another sheet,
						so you protect yourself from older browsers</li>
					<li><strong>Must</strong> be used in a <code>style</code> tag</li>
					<li>Should also be used in conjunction with an older-style
						page (lo-fi) for older browsers</li>
				</ul>

				<h3>Example:</h3>
				<p>In your document, use the following within the &lt;head&gt;
					tag:</p>
				<pre>&lt;link rel="stylesheet" type="text/css" href="/css/basic_styles.css" media="all" /&gt;</pre>
				<pre>&lt;style type="text/css" media="all"&gt;
@import "/css/rich_styles.css";
&lt;/style&gt;</pre>

				<p>
					This allows you to include basic styles in
					<code>basic_styles.css</code>
					(for older, or CSS-less-supported browsers) and have current styles
					for modern browsers in
					<code>rich_styles.css</code>
					.
				</p>

				<p>
					Further to that, you can use the
					<code>@import</code>
					method to import multiple stylesheets from a basic stylesheet that
					you link to. This will reduce the clutter that can sometimes occur
					within the
					<code>&lt;head&gt;</code>
					section.
				</p>
				<p>It is also a great place to be able to manage your CSS from</p>
				<h3>Example:</h3>
				<p>
					From your main document, create a
					<code>&lt;link&gt;</code>
					to your
					<code>styles.css</code>
					page (you can even use
					<code>media="screen"</code>
					, or
					<code>media="print"</code>
					.)
				</p>
				<p>
					in the body of the
					<code>styles.css</code>
					file, import as many files as you need:
				</p>
				<ul>
					<li><code>@import url(/css/type.css);</code></li>
					<li><code>@import url(/css/nav.css);</code></li>
					<li><code>@import url(/css/template.css);</code></li>
				</ul>
				<p></p>



				<h3>Cool CSS Tool</h3>
				<ul>
					<li>Related to multiple stylesheets, remember our look at the
						excellent Firefox Extension: Firebug</li>
					<li>This will gather all of the stylesheets in one place and
						let you play with your styles</li>
					<li>See "live edits" as you make changes to the CSS</li>
				</ul>
			</div>



			<h2>CSS Selectors</h2>
			<div class="content-block">
				<p>Other than Element, Class, and ID selectors, there are many
					more that allow you to really present your content.</p>

				<h3>Universal Selector</h3>
				<ul>
					<li>This is a fairly widely supported selector: the asterisk *</li>
					<li>Use it to specify a global rule</li>
					<li><code>* { color: red; }</code> will make all font color
						red on your page</li>
					<li>The universal selector can be very powerful, as it can
						command a lot of changes to your styles,</li>
				</ul>


				<h3>Pseudo-classes</h3>
				<p>
					A Pseudo-class is a selector that allows you to reference a
					specific action or attribute of an element. This is most often used
					when specifying
					<code>a</code>
					attributes, such as
					<code>:visited</code>
					and
					<code>:link</code>
					.
				</p>

				<p>
					There are other uses for pseudo elements, that will allow for
					greater detail in styling content, such as
					<code>:first-letter</code>
					and
					<code>:first-line</code>
					. These allow the browser to apply a style based on an unselected,
					but displayed element.
				</p>

				<p>
					<strong>Best part:</strong> No
					<code>span</code>
					or
					<code>div</code>
					required to access these pseudo-elements.
				</p>
				<ul>
					<li>Within <code>a</code> pseudo-elements in particular, it's
						important to follow a certain order:
    					<ul>
    						<li>Link</li>
    						<li>Visited</li>
    						<li>Hover</li>
    						<li>Active</li>
    					</ul>
                    </li>					
					<li>Easy mnemonic: LVHA - <strong>L</strong>o<strong>V</strong>e
						- <strong>HA</strong>te
					</li>
					<li>Because of the way that CSS applies rules, it looks at the
						LAST rule for a given element and applies more weight to it.</li>
					<li>So: if you are Hovering over a link, you don't want to see
						the Link state</li>
					<li>So: If you CLICK on a link, you don't want to see the Link
						state</li>
				</ul>

				<p>We'll cover more Pseudo-Class magic next week!</p>

				<h3>Descendant Selectors</h3>
				<ul>
					<li>Separated by a space, the last element being the key one</li>
					<li><code>h1 em</code> will apply rules to all em's within an
						h1</li>
					<li>You can have as many as you want: <code>ul ol ul li</code></li>
					<li>Great for specifying different styles when they apply only
						in certain areas</li>
					<li><code>#nav a { ... }</code> will only apply these rules to
						Anchors within the div called nav</li>
					<li>Degree of separation can be infinite, so be careful</li>
					<li><code>p em</code> will match ANY em that descends from a
						paragraph, no matter how nested</li>
				</ul>

				<h3>Child Selectors</h3>
				<ul>
					<li>Uses the &gt; combinator to specify children</li>
					<li>Will select an element that is directly descended from
						another element</li>
					<li><code>p &gt; strong</code> will only select a strong tag
						that is inside a paragraph</li>
					<li>Will not select a strong tag embedded in any other tag
						(even if it is within a paragraph)</li>
				</ul>


				<h3>Attribute Selectors</h3>
				<ul>
					<li>You can also select elements by what the element contains</li>
					<li>The method is: <code>element[attribute=value]</code></li>
					<li>If you specify an attribute with no value, you will match
						any element that simply has the attribute present (no matter what
						it's value is)</li>
					<li><code>p[align] {color: red;}</code> will turn red any
						paragraph that contains an align attribute</li>
					<li>Similarly, <code>img[alt] {border: 1pt red solid; }</code>
						will draw a red line around all images with an alt attribute
					</li>
					<li>You can further direct the attribute selector to find
						content that is at the beginning (using the carat: ^), somewhere
						inside (using the asterisk: *) or end of a value (using the dollar
						sign: $)</li>
					<li>If you wanted to find any files that were SHTML files and
						mark their link differently, you could write: <code>a[href$=".shtml"]
							{ color: olive; }</code>
					</li>
				</ul>
			</div>
			<h2>Simplifying your CSS</h2>
			<div class="content-block">
				<p>When building your CSS rules, there are some easy ways to
					compact your code.</p>
				<h3>Grouping selectors</h3>
				<ul>
					<li>If you would like to apply the same style to a multitude
						of different selectors, you can group them with the comma</li>
					<li><code>h1, h2, h3, h4, h5 { color: red; }</code></li>
					<li>This can be done with Elements, classes and IDs</li>
					<li>Specific rules for H3 (for example) can come later</li>
				</ul>

				<h3>Grouping comes to Classes</h3>
				<ul>
					<li>As well as grouping Elements, you can also group classes</li>
					<li><code>.cool, .wicked { ... }</code></li>
					<li>But you can also select those classes in your HTML</li>
					<li><code>&lt; p class="cool wicked"&gt;</code> will actually
						select both the cool and wicked classes</li>
					<li>Order is irrelevant</li>
					<li>Case is important! Remember to use a single rule for CSS
						naming and stick with it</li>
				</ul>
			</div>
		</article>
		
		<article id="exercises">
			<h2>Exercise</h2>
			<div class="content-block">
				<h3>Using Various Selectors</h3>
				<p>While most selectors are fairly straightforward, using the
					right ones can be a little confusing.</p>
				<p>To get a better handle on how they work, we'll use difference
					kinds of selectors to complete the exercises listed below</p>
				<p>
					For this exercise, you can use Firefox and either <a
						href="https://addons.mozilla.org/firefox/60/">Web Developer
						Extension</a> or <a href="http://getfirebug.com/">Firebug</a> in order
					to access Edit CSS
				</p>
				<ul>
					<li><a href="exercise/exercise1.html">Exercise 1</a></li>
					<li><a href="exercise/exercise2.html">Exercise 2</a></li>
				</ul>
				<p>Try to make your page look exactly like the example pages</p>

			</div>


			<h2>Exercise</h2>
			<div class="content-block">
				<h3>More Attribute Selectors - Identify File Types</h3>
				<p>In this advanced exercise, you can use Attribute Selectors to
					let your users know what kind of file they are going to download by
					showing an icon</p>
				<p>Using CSS, you don't have to add any images to your markup!</p>
				<ul>
					<li>Here is a <a href="links.html">page with document
							links</a> that links to 3 different file types
					</li>
					<li>Here is a <a href="images">directory with file type
							icons</a></li>
					<li>Using attribute selectors (and a <code>background</code>
						property), try and get the icons to line up with each file type
					</li>

				</ul>
			</div>
		</article>
		
		<article id="specificity">
		
			<h2>Rule Order &amp; Specificity</h2>
			<div class="content-block">

				<p>When a style declaration is found to be in conflict with a
					previously declared style, there is a method for determining which
					one will win out. The process is built into every web browser, and
					almost all of them calculate the values identically (for once!).</p>

				<p>
					Here is how the <abbr title="World Wide Web Consortium">W3C</abbr>
					defines the process by which style order is determined:
				</p>

				<ul>
					<li><strong>Discover all declarations.</strong> Find all
						declarations that apply to the element and property in question,
						for the target media type. Declarations apply if the associated
						selector matches the element in question.</li>
					<li><strong>Sheet Order.</strong> The primary sort of the
						declarations is by weight and origin: for normal declarations,
						author style sheets override user style sheets which override the
						default style sheet.
    					<ul>
    						<li class="note"><em>Note:</em> For "!important"
    							declarations, user style sheets override author style sheets
    							which override the default style sheet. "!important" declaration
    							override normal declarations. An imported style sheet has the
    							same origin as the style sheet that imported it.</li>
    					</ul>
    				</li>
					<li><strong>Specificity:</strong> The secondary sort is by
						specificity of selector: more specific selectors will override
						more general ones. Pseudo-elements and pseudo-classes are counted
						as normal elements and classes, respectively.</li>
					<li><strong>Sort by Order:</strong> Finally, sort by order
						specified: if two rules have the same weight, origin and
						specificity, the latter specified wins. Rules in imported style
						sheets are considered to be before any rules in the style sheet
						itself.</li>
				</ul>

				<p>All of the rules are pretty straightforward, except for
					Specificity, which bears some explanation.</p>

				<p>
					<strong>Specificity</strong> is a method for determining what rules
					are applied when a conflict between two selectors occurs. Through a
					method of adding values when certain elements and selectors are
					present, a specificity number can be applied to any CSS rule. The
					one with highest specificity wins and the associated rule is
					applied to the element(s) in question.
				</p>

				<h3>Ruleset for Specificity</h3>
				<p>Style sheets can also override conflicting style sheets based
					on their level of specificity, where a more specific style will
					always win out over a less specific one. It is simply a counting
					game to calculate the specificity of a selector.</p>
				<ol>
					<li>Count the number of ID attributes in the selector.</li>
					<li>Count the number of CLASS attributes in the selector.</li>
					<li>Count the number of HTML tag names in the selector.</li>
				</ol>
				<p></p>

				<p>Next, write the three numbers in exact order with no spaces
					or commas to obtain a three digit number. (Note, you may need to
					convert the numbers to a larger base to end up with three digits.)
					The final list of numbers corresponding to selectors will easily
					determine specificity with the higher numbers winning out over
					lower numbers. Following is a list of selectors sorted by
					specificity:</p>
				<ul>
					<li>#id1<br>/* a=1 b=0 c=0 --&gt; specificity = 100 */
					</li>
					<li>UL UL LI.red<br>/* a=0 b=1 c=3 --&gt; specificity =
						013 */
					</li>
					<li>LI.red<br>/* a=0 b=1 c=1 --&gt; specificity = 011 */
					</li>
					<li>LI<br>/* a=0 b=0 c=1 --&gt; specificity = 001 */
					</li>
				</ul>
				<p></p>


				<h3>!Important rule</h3>
				<ul>
					<li>This declaration, when added to a rule, will override
						almost all other declarations.</li>
					<li>It indicates that this rule should take over any previous
						rules that might govern a specific element.</li>
					<li>This rule can cause havoc if overused, as it will overrule
						any other declaration with the same selector. <strong>Be
							careful with <code>!important</code>
					</strong>
					</li>
				</ul>


				<h3>Rule Compacting</h3>
				<ul>
					<li>There are a lot of rules that will accept a compacted
						ruleset</li>
					<li>Some examples:
						<ul>
							<li>Font</li>
							<li>Border</li>
							<li>Padding</li>
							<li>Margin</li>
						</ul>
					</li>
					<li>Font is likely the most common, followed by border, margin
						and padding</li>
					<li>You can use font-family, font-size, font-weight,
						line-height and font-style as separate rules</li>
					<li>Sometimes you may want to specify just the specifics</li>
					<li>Or, you can compact: (font-style) (font-weight)
						(font-variant) (font-size/line-height) (font-family)</li>
					<li>Like this: <code>font: italic bold small-caps
							100%/1.3em Arial, "Trebuchet MS", Sans-serif;</code></li>
				</ul>

				<h3>While we are on Fonts...</h3>
				<ul>
					<li>Remember to <strong>always</strong> specify multiple fonts
					</li>
					<li>Also, <strong>always</strong> specify a font style as a
						backup (serif, sans-serif, monospace, fantasy)
					</li>
					<li>If font name has a space, make sure you enclose it in
						quotes: "Times New Roman"</li>
					<li>Serif fonts: good for headlines</li>
					<li>Sans-serif fonts: good for body content</li>
					<li><strong>Bad fonts</strong>: Comic Sans and Impact. Resist
						the urge!</li>
				</ul>

			</div>
		</article>

		<article id="measurements">
			<h2>CSS Measurements</h2>
			<div class="content-block">

				<p>In CSS, there are a number of measurement values that can be
					used in declarations.</p>

				<ul>
					<li>The most common are size measurements which are mostly
						applied to fonts, margins, padding, borders, etc.</li>
					<li>Can be an easy way to space your page - based on the
						printed word on the page</li>
					<li>Some measurements systems are very old and rarely used</li>
				</ul>

				<h3>Size measurements</h3>

				<ul>
					<li><strong>px</strong> - Pixels is one of the most common
						measuring types. It is specific to computers, as it renders based
						on the pixel-display of all monitors. Great for specific
						measurements on boxes and borders, but for fonts, it can lead to
						difficulty as some browsers don't allow scaling and font can end
						up too small</li>
					<li><strong>pt</strong> - Points is an aold system related to
						type-setting that had a standard size for points. This is a
						relative size based on the users' system</li>
					<li><strong>pc</strong> - Picas is a very old system that was
						frequently related to typewritten documents. Rarely used.</li>
					<li><strong>em</strong> - A relative measurement of the letter
						"m" in the chosen font. This is a popular one for spacing around
						text, as it inherits the font dimensions</li>
					<li><strong>ex</strong> - Similar to <code>em</code>, this is
						a relative measurement of the letter "x". However, it is rarely
						used, and not fully supported</li>
					<li><strong>%</strong> - Percentage measurements are also very
						common, but can be problematic when inheritance happens when
						multiple elements are nested in one another</li>
					<li><strong>named</strong> - This refers to fonts and a few
						other elements. The named sizes are xx-small, x-small, small,
						medium, large, x-large, xx-large. They are relative to the
						browsers base font size</li>
				</ul>

				<h3>Color Measurement</h3>
				<p>Colors can be specified in a number of ways, corresponding to
					the system that your organization or visual element requires.</p>

				<p>Almost all color systems use a method for expressing a
					combination of the three color spaces used for displaying colors on
					computer monitors: Red Green and Blue.</p>
				<ul>
					<li><strong>Hex: <code>#003366</code></strong> - One of the
						most common systems, it combines 2 digits each for Red Green and
						Blue. Each hex pair stand stands for digits between 00 and FF in
						hexadecimal</li>
					<li><strong>Compact Hex: <code>#f30</code></strong> - This is
						almost identical to the Hex version, except that when three
						numbers are used, most browsers will just double-up each digit.
						So, <code>#f30</code> will become <code>#ff3300</code></li>
					<li><strong>Named: <code>cornflowerblue</code></strong> -
						Although the official W3C specification only lists 16 named
						colors, almost every browser supports the various <a
						href="http://www.google.ca/search?q=css+named+colors">named
							colors</a></li>
					<li><strong>RGB: <code>rgb(255, 0, 255)</code></strong> - This
						allows the user to specify the same thing as Hex, but in Decimal
						format</li>
					<li><strong>RGB %: <code>rgb(100%, 0%, 50%)</code></strong> -
						Almost identical to RGB, but with percentages of each color space
						instead</li>
				</ul>
			</div>

			<h2>CSS Resources</h2>
			<div class="content-block">
				<ul>
					<li><strong><a
							href="https://developer.mozilla.org/en/CSS-2_Quick_Reference/">CSS2
								Quick Reference</a></strong></li>
					<li><strong><a
							href="http://meyerweb.com/eric/tools/css/reset/">CSS Reset</a></strong></li>
					<li><strong><a
							href="http://forabeautifulweb.com/blog/about/universal_internet_explorer_6_css/">Universal
								IE6 CSS</a></strong></li>
				</ul>
			</div>

			<h2>Organizing CSS Rules</h2>
			<div class="content-block">
				<h3>What does that rule do?</h3>
				<p>When building your CSS, here are some tips to better organize
					your rules</p>
				<ul>
					<li><strong>Set the defaults.</strong> Create your global
						rules (like what fonts you want to see on the entire page), and
						specify variations for elements or classes later in your
						stylesheet</li>
					<li><strong>Later rules override earlier ones.</strong> We'll
						learn more about this when we discuss <strong>specificity</strong>
						in a later lecture, but very basically: all things being equal,
						later rules override earlier ones. So, add more specific
						requirements in the later parts of your stylesheet</li>
					<li><strong>!important always wins.</strong> If you want a
						specific rule to be used no matter where it falls in the cascade,
						add <strong>!important</strong> to the end. Use this <strong>sparingly</strong>!</li>
					<li>Comment your code!</li>
				</ul>
			</div>
		</article>
		
		<article id="homework">
			<h2>Homework</h2>
			<div class="content-block">
				<p>Take the page you created for Finnegan and apply two
					stylesheets:</p>
				<ol>
					<li>Make a straightforward one similar to the original (you
						may have already done this)</li>
					<li>Create an alternate stylesheet and change up the style of
						the page significantly. Keep all of the elements, don't change any
						HTML, just change the CSS.</li>
				</ol>
			</div>
		</article>
        
        <footer id="bottom-nav">
            <a href="#top">Top of Page</a> | <a href="http://teams.thenet.ca/teamone/index.html">TeamOne Home</a>
        </footer>
	</section>
</body>
</html>

